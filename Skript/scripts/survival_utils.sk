options:
	# /wild config options
	avoid: air or lava or water
	min: 1
	max: 2000000

	# function toggles
	enableTracking: true
	enableWild: true
	enableTPA: true
	enableSilkSpawners: true
	enableSingleSleep: true

	# sleep conifg - percentage of players required to sleep in decimal format
	decimalPercent: 0.3





	
# Sends player current coords
command /coords:
	trigger:
		send "Your current co-ordinates are %location of player%" to player




# Death coords 
on death:
	if player is in "world":
		set {_dim} to "overworld"
	else if player is in "world_nether":
		set {_dim} to "nether"
	else:
		set {_dim} to "end"
	send formatted "You died at <yellow>%location of player%<reset> in the %{_dim}%" to player
	



# Compass tracking
command /track <number> <number> <number>:
	usage: /track <x> <y> <z>
	trigger:
		if {@enableTracking} is not true:
			send "<red>This function has been disabled by the administrator"
		else:
			set {compass::%player%} to location at arg-1, arg-2, arg-3
			if player's inventory does not contain 1 compass:
				give player 1 compass
			set player's compass target to {compass::%player%}
			send "Now tracking <yellow>%{compass::%player%}%" to player

on right click with compass:
	if {@enableTracking} is true:
		if player is sneaking:
			set {compass::%player%} to location of player
			set player's compass target to {compass::%player%}
			send "Now tracking <yellow>%{compass::%player%}%" to player




# Wild teleport command
command /wild:
	trigger:
		if {@enableWild} is not true:
			send "<red>This function has been disabled by the administrator"
		else:
			set {_loc::old} to player's location
			while player's location is {_loc::old}:
				set {_loc::new} to location at random number between {@min} and {@max}, 0, random number between {@min} and {@max}
				loop blocks above {_loc::new}:
					if loop-block and block above loop-block are air:
						if block under loop-block is not {@avoid}:
							set {_loc::new} to location of loop-block
							teleport player to {_loc::new}
							stop loop



# Multiplayer sleep
on join:
	if {@enableSingleSleep} is true:
		set {bed::%player%} to false
		teleport player to player

on bed enter:
	if {@enableSingleSleep} is true:
		set {bed::%player%} to true
		wait 4 seconds
		if {bed::%player%} is true:
			add player to {sleepers::*}
			set {_numPlayers} to number of online players
			set {_numSleepers} to size of {sleepers::*}
			set {_reqSleep} to floor({_numPlayers} * {@decimalPercent})
			if {_numSleepers} is greater or equal to {_reqSleep}:
				set time to 06:00
				set weather to clear
				set food of player to 10
				broadcast "<yellow>%player% has gone to bed. Sweet Dreams!"

on bed leave:
	set {bed::%player%} to false
	remove player from {sleepers::*}



# Silk touch spawners
on break of spawner:
	if {@enableSilkSpawners} is not true:
		send "<red>This function has been disabled by the administrator"
	else:
		if player's tool is enchanted with silk touch:
			set {spawner.nbt} to block-nbt of event-block
			set {spawner.entity::*} to {spawner.nbt} split at """"
			set {_spawner.name::*} to {spawner.entity::2} split at ":"
			set {_spawner.name::2} to capitalize({_spawner.name::2})
			drop spawner named "<yellow>%{_spawner.name::2}%" with lore {spawner.entity::2}
			cancel the experience drops

on place of spawner:
	if {@enableSilkSpawners} is not true:
		send "<red>This function has been disabled by the administrator"
	else:
		set {_entity} to 1st line of lore of player's tool
		if {_entity} does not contain "minecraft:":
			set {_entity} to 1st line of lore of player's offhand tool
		set event-block to "{SpawnData:{id:""%{_entity}%""},SpawnPotentials:[{Entity:{id:""%{_entity}% Spawner""}}]}"

function capitalize(text: text) :: text:
	set {_char} to the first character of {_text}
	set {_char} to {_char} in upper case
	set {_remaining} to ""
	set {_remaining} to the last (length of {_text} - 1) characters of {_text}
	return "%{_char}%%{_remaining}%"