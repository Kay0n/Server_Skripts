
on load:
	wait 1 tick
	set {arrows.swapping} to tipped arrow of leaping named "Arrow of Swapping" with lore "Swapping"
	set {arrows.stomping} to tipped arrow of strength named "Arrow of Stomping" with lore "Stomping"
	set {arrows.gravitation} to tipped arrow of fire resistance named "Arrow of Gravitation" with lore "Gravitation"
	set {arrows.freezing} to tipped arrow of speed named "Arrow of Freezing" with lore "Freezing"
	set {arrows.ineptitude} to tipped arrow of regeneration named "Arrow of Ineptitude" with lore "Ineptitude"
	set {arrows.hindrance} to tipped arrow of invisibility named "Arrow of Hindrance" with lore "Hindrance"
	set {arrows.revelation} to spectral arrow named "Arrow of Revelation" with lore "Revelation"

	clear {arrows.list::*}
	add {arrows.swapping} and {arrows.stomping} and {arrows.gravitation} and {arrows.freezing} and {arrows.ineptitude} and {arrows.hindrance} and {arrows.revelation} to {arrows.list::*}
	remove "Arrows" from {custom.active::*}
	add "Arrows" to {custom.active::*}

on shoot:
	shooter is player
	"%event-projectile%" contain "arrow"
	loop all items in shooter's inventory: 
		if loop-item is tipped arrow or spectral arrow:
			set {arrows.%event-projectile%} to the 1st line of the lore of loop-item
			if {arrows.%event-projectile%} is set:
				if tool of shooter is enchanted with infinity 1:
					set {magical-arrow} to loop-item
					remove 1 of {magical-arrow} from shooter
				if offhand tool of shooter is enchanted with infinity 1:
					set {magical-arrow} to loop-item
					remove 1 of {magical-arrow} from shooter
				if tool of shooter is crossbow:
					cancel event
					send "<red>Magical arrows do not function with crossbows" to shooter
				if offhand tool of shooter is crossbow:
					cancel event
					send "<red>Magical arrows do not function with crossbows" to shooter
			exit 1 loop



on projectile hit:
	if {arrows.%event-projectile%} is set:
		set {_loc} to location of projectile
		delete event-projectile

		if {arrows.%event-projectile%} is lore of {arrows.stomping}:
			loop entities in radius 10 around {_loc}:
				push loop-entity upwards at speed 1.2
			exit trigger


		if {arrows.%event-projectile%} is lore of {arrows.gravitation}:
			loop 15 times:
				wait 5 tick
				loop living entities in radius 16 around {_loc}:
					push loop-entity (direction from loop-entity to {_loc}) at speed 0.5
			exit trigger
		

		if {arrows.%event-projectile%} is lore of {arrows.hindrance}:
			create a fake explosion at {_loc}
			loop entities in radius 10 around {_loc}:
				remove blindness from loop-entity
				apply blindness to loop-entity for 15 seconds
		
		if {arrows.%event-projectile%} is lore of {arrows.revelation}:
			loop entities in radius 30 around {_loc}:
				remove glowing from loop-entity
				apply glowing to loop-entity for 5 seconds


on damage:
	if projectile exists:
		if "%event-projectile%" is "arrow":
			if {arrows.%event-projectile%} is set:
				if {arrows.%event-projectile%} is not "None":
					wait 2 ticks
					removeAllEffects(victim)

			if {arrows.%event-projectile%} is lore of {arrows.swapping}:
				set {_loc} to victim's location
				teleport victim to attacker
				teleport attacker to {_loc}
				exit trigger

			if {arrows.%event-projectile%} is lore of {arrows.freezing}:
				set {_freezeloc} to location of block at victim
				loop blocks in radius 3 around {_freezeloc}:
					loop-block is air
					set loop-block to ice
				wait 5 seconds
				loop blocks in radius 3 around {_freezeloc}:
					loop-block is ice or water
					set loop-block to air
				exit trigger

			if {arrows.%event-projectile%} is lore of {arrows.ineptitude}:
				clear {dropitems::*}
				add victim's tool to {dropitems::*}
				add victim's offhand tool to {dropitems::*}
				add victim's helmet to {dropitems::*}
				add victim's chestplate to {dropitems::*}
				add victim's leggings to {dropitems::*}
				add victim's boots to {dropitems::*}
				clear victim's tool
				clear victim's offhand tool
				clear victim's helmet
				clear victim's leggings
				clear victim's chestplate
				clear victim's boots
				loop {dropitems::*}:
					drop loop-value at victim
				clear {dropitems::*}
				exit trigger

		
function removeAllEffects(p: entity) :: text:
	remove speed from {_p}
	remove strength from {_p}
	remove jump boost from {_p}
	remove regeneration from {_p}
	remove fire resistance from {_p}
	remove invisibility from {_p}
	remove blindness from {_p}

